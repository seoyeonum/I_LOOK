<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.team1.mybatis.IGenRegDAO">
	
	<!-- 일반 돌봄 근무 등록 -->

	<insert id="add" parameterType="com.team1.dto.GenRegDTO" keyProperty="gen_reg_id">
	<selectKey keyProperty="gen_reg_id" resultType="String" order="BEFORE">
		SELECT 'GREG' || LPAD(SEQ_GREG.NEXTVAL, 4, '0') AS gen_reg_id
		FROM DUAL
	</selectKey>
		INSERT INTO GEN_REG(GEN_REG_ID, SIT_BACKUP_ID, TITLE, START_DATE, END_DATE
		, START_TIME, END_TIME, REG_DATE, INTRODUCTION)
		VALUES(#{gen_reg_id}, #{sit_backup_id}, #{title}
		, #{start_date}, #{end_date}
		, #{start_time}, #{end_time}, SYSDATE, #{introduction})
	</insert>
	
	<!-- 일반 돌봄 근무 삭제 -->
	<delete id="remove">
		DELETE FROM GEN_REG
		WHERE GEN_REG_ID = #{gen_reg_id}
	</delete>

	<!-- 시터 근무 가능 목록 -->
	<select id="list" resultType="com.team1.dto.GenRegDTO">
		SELECT GEN_REG_ID, SIT_BACKUP_ID, TITLE, START_DATE, END_DATE
		, START_TIME, END_TIME, REG_DATE, INTRODUCTION
		FROM GEN_REG		
	</select>
	
	<!-- 전체 근무 등록 수 확인 -->
	<select id="countGen" resultType="java.lang.Integer">
		SELECT COUNT(*) AS COUNT
		FROM GEN_REG
	</select>
	
	<!-- 특정 아이디에 따른 근무 등록 파일-->
	<select id="regList" resultType="com.team1.dto.GenRegDTO">
		SELECT GEN_REG_ID, SIT_BACKUP_ID, TITLE, START_DATE, END_DATE
		, START_TIME, END_TIME, REG_DATE, INTRODUCTION
		FROM GEN_REG
		WHERE GEN_REG_ID = #{gen_reg_id}	
	</select>
	
	<!-- 근무 등록 아이디에 따른 근무 1건의 정보
	public GenRegDTO regOnesearch(String gen_reg_id); -->
	<select id="regOnesearch" resultType="com.team1.dto.GenRegDTO">
		SELECT GEN_REG_ID, SIT_BACKUP_ID, TITLE, START_DATE, END_DATE
		, START_TIME, END_TIME, REG_DATE, INTRODUCTION
		FROM GEN_REG
		WHERE GEN_REG_ID = #{gen_reg_id}	
	</select>
	
	<!-- (부모가 보는) 1차 필터 결과 리스트 -->
	<select id="listPrimaryGenReg" resultType="com.team1.dto.GenRegDTO">
	 SELECT *
	 FROM (
        SELECT ROWNUM AS RNUM, DATA.*
        FROM (
			SELECT R.GEN_REG_ID, R.SIT_BACKUP_ID, R.NAME, SV.GENDER, SV.AGE
			     , SR.FILE_PATH AS PHOTO_FILE_PATH, G.GRADE
			     , (SELECT FILE_PATH FROM GRADES WHERE NAME = G.GRADE) AS GRADE_FILE_PATH
			     , NVL(RV.AVERAGE_RAITING,0) AS AVG_RATING
			     , NVL(RV.REVIEW_COUNT,0) AS REVIEW_COUNT
			     , NVL(RRV.AVG_RATING,0) AS RECENT_AVG_RATING
			     , NVL(RRV.REVIEW_COUNT,0) AS RECENT_REVIEW_COUNT
			     , R.TITLE, R.INTRODUCTION, R.START_DATE, R.END_DATE, R.START_TIME, R.END_TIME
			     , CASE WHEN EXISTS 
			                ( SELECT 1
			                  FROM GEN_REQ Q
			                  WHERE R.GEN_REG_ID = Q.GEN_REG_ID
			                ) THEN '예약중'
			            ELSE '예약가능'
			            END AS STATUS
			FROM GEN_REG_POSSIBLE_VIEW R JOIN GEN_SIT_INFO_VIEW SV
			ON R.SIT_BACKUP_ID = SV.SIT_BACKUP_ID
			    JOIN SIT_GRADE_VIEW G
			    ON R.SIT_BACKUP_ID = G.SIT_BACKUP_ID
			        JOIN SIT_REG SR
			        ON SV.SIT_BACKUP_ID = SR.SIT_BACKUP_ID
			            LEFT JOIN RAITING_VIEW RV
			            ON R.SIT_BACKUP_ID = RV.SIT_BACKUP_ID
			                LEFT JOIN RECENT_RATING_VIEW RRV
			                ON R.SIT_BACKUP_ID = RRV.SIT_BACKUP_ID
			WHERE R.START_DATE &lt;= #{start_date}
			  AND R.END_DATE &gt;= #{end_date}
			  AND R.START_TIME &lt;= #{start_time}
			  AND R.END_TIME &gt;= #{end_time}
		    ORDER BY STATUS, R.REG_DATE
	    ) DATA
        WHERE ROWNUM &lt;= #{end,jdbcType=INTEGER}
    ) 
    WHERE RNUM &gt;= #{start,jdbcType=INTEGER}
	</select>
	
	<!-- (부모가 보는) 1차 필터 결과 리스트 건수 -->
	<select id="countPrimaryGenReg" resultType="java.lang.Integer">
		SELECT COUNT(*) AS COUNT
		FROM GEN_REG_POSSIBLE_VIEW R JOIN GEN_SIT_INFO_VIEW SV
		ON R.SIT_BACKUP_ID = SV.SIT_BACKUP_ID
		    JOIN SIT_GRADE_VIEW G
		    ON R.SIT_BACKUP_ID = G.SIT_BACKUP_ID
		        JOIN SIT_REG SR
		        ON SV.SIT_BACKUP_ID = SR.SIT_BACKUP_ID
		WHERE R.START_DATE &lt;= #{start_date}
		  AND R.END_DATE &gt;= #{end_date}
		  AND R.START_TIME &lt;= #{start_time}
		  AND R.END_TIME &gt;= #{end_time}
	</select>
	
	<!-- (부모가 보는) 2차 필터 결과 리스트 -->
	<select id="listSecondaryGenReg" parameterType="map" resultType="com.team1.dto.GenRegDTO">
	SELECT *
	 FROM (
        SELECT ROWNUM AS RNUM, DATA.*
        FROM (
	        SELECT R.GEN_REG_ID, R.SIT_BACKUP_ID, R.NAME, SV.GENDER, SV.AGE
	             , SR.FILE_PATH AS PHOTO_FILE_PATH, G.GRADE
	             , (SELECT FILE_PATH FROM GRADES WHERE NAME = G.GRADE) AS GRADE_FILE_PATH
	             , NVL(RV.AVG_RATING,0) AS AVG_RATING
	             , NVL(RV.REVIEW_COUNT,0) AS REVIEW_COUNT
	             , NVL(RRV.AVG_RATING,0) AS RECENT_AVG_RATING
	             , NVL(RRV.REVIEW_COUNT,0) AS RECENT_REVIEW_COUNT
	             , R.TITLE, R.INTRODUCTION, R.START_DATE, R.END_DATE, R.START_TIME, R.END_TIME
	             , CASE WHEN EXISTS 
	                        ( SELECT 1
	                          FROM GEN_REQ Q
	                          WHERE R.GEN_REG_ID = Q.GEN_REG_ID
	                        ) THEN '예약중'
	                    ELSE '예약가능'
	                    END AS STATUS
	        FROM GEN_REG_POSSIBLE_VIEW R JOIN GEN_SIT_INFO_VIEW SV
	        ON R.SIT_BACKUP_ID = SV.SIT_BACKUP_ID
	            JOIN SIT_GRADE_VIEW G
	            ON R.SIT_BACKUP_ID = G.SIT_BACKUP_ID
	                JOIN SIT_REG SR
	                ON SV.SIT_BACKUP_ID = SR.SIT_BACKUP_ID
	                    LEFT JOIN RAITING_VIEW RV
	                    ON R.SIT_BACKUP_ID = RV.SIT_BACKUP_ID
	                        LEFT JOIN RECENT_RATING_VIEW RRV
	                        ON R.SIT_BACKUP_ID = RRV.SIT_BACKUP_ID
			WHERE R.START_DATE &lt;= #{start_date}
			  AND R.END_DATE &gt;= #{end_date}
			  AND R.START_TIME &lt;= #{start_time}
			  AND R.END_TIME &gt;= #{end_time}
			  
			<!-- 등급 필터 -->
			<if test="grades != null and grades.size() > 0">
			  AND GRADE IN
				<foreach item="grade" collection="grades" open="(" separator="," close=")">
				  #{grade}
				</foreach>
			</if>
			 
			<!-- 지역 필터 -->
			<!-- 
			<if test="regions != null and regions.size() > 0">
			  AND EXISTS
			  (
			    SELECT 1
			    FROM WORK_REGION_PREFERED WR JOIN REGIONS RG
			    ON WR.REGION_ID = RG.REGION_ID
			    WHERE WR.GEN_REG_ID = R.GEN_REG_ID
			    AND RG.REGION_ID IN 
			    <foreach item="region" collection="regions" open="(" separator="," close=")">
			       #{region,jdbcType=INTEGER}
			    </foreach>
			  )
			</if>
			 -->
			 
			<!-- 성별 필터 -->
			<if test="genders != null and genders.size() > 0">
			  AND
			  (
				<foreach item="gender" collection="genders" separator=" OR ">
				    <choose>
				        <when test="gender == 'female'">SV.GENDER = '여'</when>
				        <when test="gender == 'male'">SV.GENDER = '남'</when>
				        <otherwise>1=0</otherwise>	<!-- 항상 거짓. 즉, 쿼리 수행 X -->
				    </choose>
				</foreach>
			  )
			</if>
			     
			<!-- 연령대 필터 -->
			<if test="ages != null and ages.size() > 0">
			  AND AGE IN
				<foreach item="age" collection="ages" open="(" separator="," close=")">
				  #{age}
			    </foreach>
			</if>
			
			<!-- 자격증 필터 -->
			<!-- 
			<if test="certs != null and certs.size() > 0">
			  AND R.SIT_BACKUP_ID IN
			  (
			    SELECT S.SIT_BACKUP_ID
				FROM SIT_BACKUP S JOIN SIT_REG SB
				ON S.SIT_BACKUP_ID = SB.SIT_BACKUP_ID
				    JOIN CERT_REG CR
				    ON SB.SIT_REG_ID = CR.SIT_REG_ID
				        JOIN CERT_TYPES CT
				        ON CR.CERT_TYPE_ID = CT.CERT_TYPE_ID
				WHERE CT.CERT_TYPE_ID IN 
			    <foreach item="cert" collection="certs" open="(" separator="," close=")">
			      #{cert}
			    </foreach>
			  )
			</if>
			 -->
			ORDER BY STATUS, R.REG_DATE
	    ) DATA
        WHERE ROWNUM &lt;= #{end,jdbcType=INTEGER}
    ) 
    WHERE RNUM &gt;= #{start,jdbcType=INTEGER}
	</select>
	
	
	<!-- (근무 등록 건별) 시터 선호 근무 지역 -->
	<select id="listSitPreferedRegion" resultType="java.lang.String">
		SELECT R.NAME
		FROM GEN_REG GR JOIN WORK_REGION_PREFERED WR
		ON GR.GEN_REG_ID = WR.GEN_REG_ID
		    JOIN REGIONS R
		    ON WR.REGION_ID = R.REGION_ID
		WHERE GR.GEN_REG_ID = #{gen_reg_id}
	</select>
	
	<!-- (근무 등록 건별) 시터 선호 돌봄 연령대 -->
	<select id="listSitPreferedAge" resultType="java.lang.String">
		SELECT AT.TYPE AS AGE
		FROM GEN_REG GR JOIN AGES_PREFERED AP
		ON GR.GEN_REG_ID = AP.GEN_REG_ID
		    JOIN AGE_TYPES AT
		    ON AP.AGE_TYPE_ID = AT.AGE_TYPE_ID
		WHERE GR.GEN_REG_ID = #{gen_reg_id}
	</select>
	
	<!-- (근무 등록 건별) 상세 근무 정보 조회 -->
	<select id="searchGenRegDetail" resultType="com.team1.dto.GenRegDTO">
		SELECT R.GEN_REG_ID, R.SIT_BACKUP_ID, R.NAME, SV.GENDER, SV.AGE
             , SR.FILE_PATH AS PHOTO_FILE_PATH, G.GRADE
             , (SELECT FILE_PATH FROM GRADES WHERE NAME = G.GRADE) AS GRADE_FILE_PATH
             , NVL(RV.AVERAGE_RAITING,0) AS AVG_RATING
             , NVL(RV.REVIEW_COUNT,0) AS REVIEW_COUNT
             , NVL(RRV.AVG_RATING,0) AS RECENT_AVG_RATING
             , NVL(RRV.REVIEW_COUNT,0) AS RECENT_REVIEW_COUNT
             , R.TITLE, R.INTRODUCTION, R.START_DATE, R.END_DATE, R.START_TIME, R.END_TIME
             , CASE WHEN EXISTS 
                        ( SELECT 1
                          FROM GEN_REQ Q
                          WHERE R.GEN_REG_ID = Q.GEN_REG_ID
                        ) THEN '예약중'
                    ELSE '예약가능'
                    END AS STATUS
        FROM GEN_REG_POSSIBLE_VIEW R JOIN GEN_SIT_INFO_VIEW SV
        ON R.SIT_BACKUP_ID = SV.SIT_BACKUP_ID
            JOIN SIT_GRADE_VIEW G
            ON R.SIT_BACKUP_ID = G.SIT_BACKUP_ID
                JOIN SIT_REG SR
                ON SV.SIT_BACKUP_ID = SR.SIT_BACKUP_ID
                    LEFT JOIN RAITING_VIEW RV
                    ON R.SIT_BACKUP_ID = RV.SIT_BACKUP_ID
                        LEFT JOIN RECENT_RATING_VIEW RRV
                        ON R.SIT_BACKUP_ID = RRV.SIT_BACKUP_ID
        WHERE R.GEN_REG_ID = #{gen_reg_id}
	</select>
	
	
	<!-- [관리자] 시터 근무 등록 내역 조회 -->
	<select id="adminListSitGenReg" resultType="com.team1.dto.GenRegDTO">
		SELECT *
		FROM (
		    SELECT T.*, ROWNUM RN
		    FROM (
		        SELECT 
		            R.GEN_REG_ID AS GEN_REG_ID,
		            R.SIT_BACKUP_ID AS SIT_BACKUP_ID,
		            SR.NAME AS NAME,
		            R.TITLE AS TITLE,
		            R.INTRODUCTION AS INTRODUCTION,
		            R.START_DATE AS START_DATE,
		            R.END_DATE AS END_DATE,
		            R.START_TIME AS START_TIME,
		            R.END_TIME AS END_TIME,
		            R.REG_DATE AS REG_DATE,
		            SR.FILE_PATH AS FILE_PATH,
		            SR.SIT_REG_ID AS SIT_REG_ID
		        FROM GEN_REG R
		        JOIN SIT_BACKUP S ON R.SIT_BACKUP_ID = S.SIT_BACKUP_ID
		        JOIN SIT_REG SR ON SR.SIT_BACKUP_ID = S.SIT_BACKUP_ID
		        WHERE 1=1
		        <if test="searchKey != null and searchValue != null and searchValue != ''">
		            <if test="searchKey == 'name'">
		                AND SR.NAME LIKE '%' || #{searchValue} || '%'
		            </if>
		            <if test="searchKey == 'sit_backup_id'">
		                AND R.TITLE LIKE '%' || #{searchValue} || '%'
		            </if>
		        </if>
		        <if test="currentOnly != null and currentOnly == true">
			        AND R.END_DATE >= SYSDATE
			    </if>
		        ORDER BY R.REG_DATE DESC
		    ) T
		)
		WHERE RN BETWEEN #{start} AND #{end}
	</select>
	
	<!-- [관리자] 시터 근무 등록 내역 목록 개수 확인 -->
    <select id="adminCountSitGenReg" resultType="java.lang.Integer">
		SELECT COUNT(*) AS COUNT
	      FROM GEN_REG R
	      JOIN SIT_BACKUP S ON R.SIT_BACKUP_ID = S.SIT_BACKUP_ID
	      JOIN SIT_REG SR ON SR.SIT_BACKUP_ID = S.SIT_BACKUP_ID
	      WHERE 1=1
	      <if test="searchKey != null and searchValue != null and searchValue != ''">
	          <if test="searchKey == 'name'">
	              AND SR.NAME LIKE '%' || #{searchValue} || '%'
	          </if>
	          <if test="searchKey == 'sit_backup_id'">
	              AND R.TITLE LIKE '%' || #{searchValue} || '%'
	          </if>
	      </if>
	      <if test="currentOnly != null and currentOnly == true">
	          AND R.END_DATE >= SYSDATE
	      </if>
	</select>
	
	<!-- [관리자] 시터 근무 등록 상세내역 조회 -->
    <select id="adminSitGenRegDetail" resultType="com.team1.dto.GenRegDTO">
		SELECT 
	    R.GEN_REG_ID AS GEN_REG_ID,
	    R.SIT_BACKUP_ID AS SIT_BACKUP_ID,
	    SR.NAME AS NAME,
	    R.TITLE AS TITLE,
	    R.INTRODUCTION AS INTRODUCTION,
	    R.START_DATE AS START_DATE,
	    R.END_DATE AS END_DATE,
	    R.START_TIME AS START_TIME,
	    R.END_TIME AS END_TIME,
	    R.REG_DATE AS REG_DATE,
	    SR.FILE_PATH AS FILE_PATH
	FROM GEN_REG R
	JOIN SIT_BACKUP S ON R.SIT_BACKUP_ID = S.SIT_BACKUP_ID
	JOIN SIT_REG SR ON SR.SIT_BACKUP_ID = S.SIT_BACKUP_ID
	WHERE GEN_REG_ID = #{gen_reg_id}
	</select>


<!--     
<select id="countSitGenReg" resultType="java.lang.Integer">
		SELECT COUNT(*) AS COUNT
		FROM GEN_REG_POSSIBLE_VIEW R
		WHERE R.START_DATE &lt;= #{start_date}
		  AND R.END_DATE &gt;= #{end_date}
		  AND R.START_TIME &lt;= #{start_time}
		  AND R.END_TIME &gt;= #{end_time}
</select>
 -->	
</mapper>